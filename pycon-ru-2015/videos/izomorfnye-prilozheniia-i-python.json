{
  "description": "Доклад будет посвящен проблеме единой шаблонизации на сервере и клиенте. Для чего это нужно? Например, вы делаете классный интернет-магазин на Django и хотите, чтобы в каталоге товаров при изменении каких-то параметров список товаров динамически фильтровался. \n\nКак было раньше?\nЧеловек нажимает на фильтр, страница перезагружается с новым отфильтрованным списком товаров.\nЭто было очень медленно, и появился AJAX, разработчики стали при изменении фильтра загружать с сервера только кусочек html с отфильтрованными товарами.\nНо и этого показалось мало, теперь с сервера мы получаем JSON, а на клиенте производим отрисовку нового списка товаров.\n\nЧто получаем в итоге?\nЕсть некий шаблон, который отрисовывает список товаров на сервере, и есть шаблон, который делает это же на клиенте. Соответственно, разработчику часто необходимо поддерживать два шаблона, что может приводить к ошибкам при изменениях. Зато у клиента все быстро :)\n\nС появлением NodeJS разработчики стали задумываться о том, что теперь и на сервере, и на клиенте можно использовать единую шаблонизацию (единый код), который впоследствии назвали изоморфным. Именно поэтому разработчики часто выбирают NodeJS как основу для своих следующих проектов. \n\nЯ хочу рассказать о том, как можно не отказываться от Python на сервере, при этом получив все преимущества изоморфных приложений: от небольших контентных до сложных сервисных сайтов, на основе своего собственного опыта.\n\nПлюс расскажу, для чего вообще в 2015 году нужна серверная шаблонизация и почему это важно.\n",
  "duration": 1655,
  "recorded": "2015-09-19",
  "speakers": [
    "Vitali Glibin"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/rQNJNj7IO6A/hqdefault.jpg",
  "title": "Изоморфные приложения и Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=rQNJNj7IO6A"
    }
  ]
}
